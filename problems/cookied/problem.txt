
We can chain `map`s and `filter`s to perform a sequence of operations to values in a stream:

  var possibleKeys = numbers.filter(isPrime)
                            .filter(largeInteger)
                            .map(hashWithMessage)

  var correctKeys = possibleKeys.filter(successfullyDecodesMessage)

But, after everything, how do we do things to the resulting values?

We use `onValue` to define "side-effects" - functions executed at the endpoints of our processing chains, which return nothing.

   correctKeys.onValue(playAlertSound)

*  *  *

Our cookie setup is a bit more elaborate than I initially made it out to be.

We are actually members of the ICFS (International Cookie Frienship Society).

Through a massively distributed effort, we bake cookies in parallel, and share news of our batches over our shared channel.

Our operation is quite large. Cookies are announced far too quickly for any human to deal with.

Why don't you write a cookie daemon (cookied) that processes these requests for you?

For every batch of cookies with a deliciousness < 6, make a message of the form:

  { action: 'praise'
   , baker: 'gsussman'}

For every batch with a deliciousness >= 6, make a message of the form:

  { action: 'scold'
   , baker: 'gsussman'}

Make a POST request of praise/scold messages to `url`.

I recommend the npm module post-json for this

   npm install post-json

Usage:

   var post = require('post-json') 
   post(url, data)

Again, I will give you a stream of cookie announcements, and the URL of the server:

   module.exports = function (stream, url) {  
    // ..
   }

  Use `$ADVENTURE_COMMAND verify YOUR_PROGRAM.js` to verify your program.
  Use `$ADVENTURE_COMMAND run YOUR_PROGRAM.js` to run your program.

